//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Portfolio.Dal.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DalDb : DbContext
    {
        public DalDb()
            : base("name=DalDb")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<DocumentCategory> DocumentCategories { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<File> Files { get; set; }
        public DbSet<PhotoGallery> PhotoGalleries { get; set; }
        public DbSet<PhotoGalleriesFile> PhotoGalleriesFiles { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<DocumentType> DocumentTypes { get; set; }
        public DbSet<StaticContent> StaticContents { get; set; }
        public DbSet<NewsCategory> NewsCategories { get; set; }
        public DbSet<News> News { get; set; }
        public DbSet<DependentOrganization> DependentOrganizations { get; set; }
    
        public virtual ObjectResult<FullTextSearchResult> FullTextSearch(string searchString, string orderBy, Nullable<int> skip, Nullable<int> size, Nullable<bool> onlyNews)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("orderBy", orderBy) :
                new ObjectParameter("orderBy", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            var onlyNewsParameter = onlyNews.HasValue ?
                new ObjectParameter("onlyNews", onlyNews) :
                new ObjectParameter("onlyNews", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FullTextSearchResult>("FullTextSearch", searchStringParameter, orderByParameter, skipParameter, sizeParameter, onlyNewsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> FullTextSearchRecordCount(string searchString, Nullable<bool> onlyNews)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var onlyNewsParameter = onlyNews.HasValue ?
                new ObjectParameter("onlyNews", onlyNews) :
                new ObjectParameter("onlyNews", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("FullTextSearchRecordCount", searchStringParameter, onlyNewsParameter);
        }
    }
}
